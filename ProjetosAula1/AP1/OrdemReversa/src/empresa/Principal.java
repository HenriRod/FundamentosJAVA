package empresa;

import java.util.ArrayList; // Importa a classe ArrayList, que permite criar listas din√¢micas
import java.util.Iterator; // Importa a classe Iterator (n√£o utilizado neste c√≥digo, mas pode ser √∫til para percorrer cole√ß√µes)
import java.util.Scanner;  // Importa a classe Scanner, usada para capturar a entrada do usu√°rio

public class Principal { // Define a classe principal do programa

    public static void main(String[] args) { // M√©todo principal, ponto de entrada do programa
        ArrayList<String> nomes = new ArrayList<>(); // Lista din√¢mica para armazenar os nomes
        Scanner teclado = new Scanner(System.in);    // Objeto Scanner para capturar a entrada do usu√°rio
        String msg;                                  // Vari√°vel para armazenar temporariamente os nomes

        System.out.println("Digite quantos nomes ira inserir:"); // Solicita ao usu√°rio o n√∫mero de nomes
        int total = teclado.nextInt();                          // L√™ o n√∫mero total de nomes

        System.out.println("Digite os nomes:"); // Solicita ao usu√°rio que insira os nomes
        for (int i = 0; i < total; i++) {       // Loop para capturar os nomes digitados
            msg = teclado.next();               // L√™ um nome digitado
            nomes.add(msg);                     // Adiciona o nome √† lista
        }

        System.out.println("Ordem normal"); // Exibe os nomes na ordem em que foram inseridos
        for (String nome : nomes) {         // Loop para percorrer e imprimir cada nome
            System.out.println(nome);       // Imprime o nome atual
        }

        System.out.println("Ordem inversa"); // Exibe os nomes na ordem inversa
        for (int i = total - 1; i >= 0; i--) { // Loop para percorrer a lista de tr√°s para frente
            System.out.println(nomes.get(i)); // Imprime o nome na posi√ß√£o 'i'
        }
    }
    
    /* Vers√£o alternativa com o m√©todo reverse da classe Collections
    
    public static void main(String[] args) {
        ArrayList<String> nomes = new ArrayList<>(); // Lista din√¢mica para armazenar os nomes
        Scanner teclado = new Scanner(System.in);    // Objeto Scanner para capturar a entrada do usu√°rio
        String msg;                                  // Vari√°vel para armazenar temporariamente os nomes

        System.out.println("Digite quantos nomes ira inserir:"); // Solicita ao usu√°rio o n√∫mero de nomes
        int total = teclado.nextInt();                          // L√™ o n√∫mero total de nomes

        System.out.println("Digite os nomes:"); // Solicita ao usu√°rio que insira os nomes
        for (int i = 0; i < total; i++) {       // Loop para capturar os nomes digitados
            msg = teclado.next();               // L√™ um nome digitado
            nomes.add(msg);                     // Adiciona o nome √† lista
        }

        System.out.println("Ordem normal"); // Exibe os nomes na ordem em que foram inseridos
        System.out.println(nomes);         // Imprime a lista inteira na ordem original

        Collections.reverse(nomes);        // Inverte a ordem dos elementos da lista
        System.out.println(nomes);         // Exibe os nomes na ordem inversa
    }
    */
}


/* 
Entender a l√≥gica por tr√°s do c√≥digo envolve conhecer n√£o apenas o que cada parte faz, mas tamb√©m **como e por que funciona daquela maneira**. Vamos explorar cada linha com uma abordagem mais l√≥gica e detalhada:

---

### `package empresa;`
- **L√≥gica:** Define o pacote onde o c√≥digo est√° contido. Pacotes ajudam na organiza√ß√£o de classes e na modularidade do programa. Isso √© especialmente √∫til em projetos maiores.

---

### `import java.util.ArrayList;`
- **L√≥gica:** A classe `ArrayList` permite criar listas din√¢micas. Essa classe substitui arrays tradicionais quando o n√∫mero de elementos pode variar.  
- Voc√™ est√°, na verdade, dizendo: "Quero usar ferramentas que me permitam manipular cole√ß√µes de dados facilmente."

---

### `import java.util.Iterator;`
- **L√≥gica:** Embora n√£o seja usado diretamente neste programa, o `Iterator` √© uma interface que facilita percorrer cole√ß√µes como listas ou conjuntos. Pode ser √∫til futuramente.

---

### `import java.util.Scanner;`
- **L√≥gica:** `Scanner` captura a entrada do usu√°rio. Ele serve como ponte para interagir com o programa, permitindo que voc√™ leia informa√ß√µes inseridas diretamente pelo teclado.

---

### `public class Principal {`
- **L√≥gica:** Declara a classe principal do programa. `Principal` √© apenas um nome, mas a classe serve como a estrutura base onde todo o c√≥digo ser√° executado.

---

### `public static void main(String[] args) {`
- **L√≥gica:** Este √© o ponto de entrada da aplica√ß√£o. Sem o m√©todo `main`, o programa n√£o seria executado. **"static"** significa que este m√©todo pode ser executado sem criar um objeto da classe.

---

### `ArrayList<String> nomes = new ArrayList<>();`
- **L√≥gica:** Aqui, voc√™ cria uma lista din√¢mica chamada `nomes`, que armazenar√° strings. A l√≥gica √©: voc√™ est√° declarando uma estrutura para guardar dados de maneira flex√≠vel.

---

### `Scanner teclado = new Scanner(System.in);`
- **L√≥gica:** Inicializa o objeto `Scanner`, permitindo capturar dados digitados pelo usu√°rio. Voc√™ est√° criando o mecanismo para comunica√ß√£o entre o programa e o mundo externo.

---

### `String msg;`
- **L√≥gica:** Declara a vari√°vel `msg`, que ser√° usada para armazenar temporariamente os nomes inseridos. Isso √© como criar um "balde" para carregar dados antes de coloc√°-los na lista.

---

### `int total = teclado.nextInt();`
- **L√≥gica:** Captura um n√∫mero inteiro digitado pelo usu√°rio e o armazena em `total`. Esse valor determina quantos nomes ser√£o inseridos. 
- A l√≥gica √© simples: "Leia o dado do teclado e guarde como refer√™ncia."

---

### `System.out.println("Digite os nomes:");`
- **L√≥gica:** Exibe uma mensagem ao usu√°rio, orientando-o a fornecer nomes. Isso √© parte da interatividade do programa.

---

### `for (int i = 0; i < total; i++) {`
- **L√≥gica:** Cria um loop que ser√° executado um n√∫mero de vezes igual a `total`. A l√≥gica por tr√°s do `for` √© percorrer uma sequ√™ncia de valores (de 0 at√© `total - 1`).

---

### `msg = teclado.next();`
- **L√≥gica:** Captura o pr√≥ximo nome digitado pelo usu√°rio e o armazena em `msg`. Aqui acontece a atribui√ß√£o: voc√™ est√° dizendo "pegue este dado e guarde na vari√°vel".

---

### `nomes.add(msg);`
- **L√≥gica:** Adiciona o conte√∫do de `msg` √† lista `nomes`. Isso √© como colocar o dado coletado (nome) dentro de uma cole√ß√£o maior.

---

### `System.out.println("Ordem normal");`
- **L√≥gica:** Exibe uma mensagem indicando que os nomes ser√£o mostrados na ordem em que foram inseridos. Ajuda a organizar a sa√≠da para o usu√°rio.

---

### `for (String nome : nomes) {`
- **L√≥gica:** Um loop baseado em "for-each" que percorre cada nome na lista `nomes`. A l√≥gica √©: "Percorrer a cole√ß√£o e acessar cada elemento diretamente."

---

### `System.out.println(nome);`
- **L√≥gica:** Exibe o nome atual na lista. Isso imprime na tela o conte√∫do de cada elemento.

---

### `System.out.println("Ordem inversa");`
- **L√≥gica:** Exibe uma mensagem indicando que os nomes ser√£o mostrados na ordem inversa.

---

### `for (int i = total - 1; i >= 0; i--) {`
- **L√≥gica:** Um loop que come√ßa no √∫ltimo elemento da lista (`total - 1`) e vai at√© o primeiro (`0`). Essa l√≥gica √© usada para percorrer a lista "de tr√°s para frente."

---

### `System.out.println(nomes.get(i));`
- **L√≥gica:** Obt√©m o nome na posi√ß√£o `i` da lista e o exibe. A l√≥gica por tr√°s disso √© acessar cada elemento diretamente pelo √≠ndice.

---

Essa explica√ß√£o se aprofunda mais na **l√≥gica computacional e nas raz√µes por tr√°s de cada instru√ß√£o**. Se precisar que eu explique algum conceito em detalhes ainda maior, me avise! üöÄ
 */